// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/apis/idmgr/idmgr.proto

/*
Package pkg_apis_idmgr is a generated protocol buffer package.

It is generated from these files:
	pkg/apis/idmgr/idmgr.proto

It has these top-level messages:
	CreateIdentityVolumeRequest
	CreateIdentityVolumeResponse
	DestroyIdentityVolumeRequest
	DestroyIdentityVolumeResponse
	PodInfo
	ManagerCheckpoint
*/
package pkg_apis_idmgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateIdentityVolumeRequest struct {
	MountPath string   `protobuf:"bytes,1,opt,name=mount_path,json=mountPath" json:"mount_path,omitempty"`
	PodInfo   *PodInfo `protobuf:"bytes,2,opt,name=pod_info,json=podInfo" json:"pod_info,omitempty"`
}

func (m *CreateIdentityVolumeRequest) Reset()                    { *m = CreateIdentityVolumeRequest{} }
func (m *CreateIdentityVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateIdentityVolumeRequest) ProtoMessage()               {}
func (*CreateIdentityVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateIdentityVolumeRequest) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *CreateIdentityVolumeRequest) GetPodInfo() *PodInfo {
	if m != nil {
		return m.PodInfo
	}
	return nil
}

type CreateIdentityVolumeResponse struct {
}

func (m *CreateIdentityVolumeResponse) Reset()                    { *m = CreateIdentityVolumeResponse{} }
func (m *CreateIdentityVolumeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateIdentityVolumeResponse) ProtoMessage()               {}
func (*CreateIdentityVolumeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DestroyIdentityVolumeRequest struct {
	MountPath string `protobuf:"bytes,1,opt,name=mount_path,json=mountPath" json:"mount_path,omitempty"`
}

func (m *DestroyIdentityVolumeRequest) Reset()                    { *m = DestroyIdentityVolumeRequest{} }
func (m *DestroyIdentityVolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*DestroyIdentityVolumeRequest) ProtoMessage()               {}
func (*DestroyIdentityVolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DestroyIdentityVolumeRequest) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

type DestroyIdentityVolumeResponse struct {
}

func (m *DestroyIdentityVolumeResponse) Reset()                    { *m = DestroyIdentityVolumeResponse{} }
func (m *DestroyIdentityVolumeResponse) String() string            { return proto.CompactTextString(m) }
func (*DestroyIdentityVolumeResponse) ProtoMessage()               {}
func (*DestroyIdentityVolumeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PodInfo struct {
	Name           string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace      string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Uid            string `protobuf:"bytes,3,opt,name=uid" json:"uid,omitempty"`
	ServiceAccount string `protobuf:"bytes,4,opt,name=service_account,json=serviceAccount" json:"service_account,omitempty"`
}

func (m *PodInfo) Reset()                    { *m = PodInfo{} }
func (m *PodInfo) String() string            { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()               {}
func (*PodInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PodInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodInfo) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *PodInfo) GetServiceAccount() string {
	if m != nil {
		return m.ServiceAccount
	}
	return ""
}

type ManagerCheckpoint struct {
	MountPath string   `protobuf:"bytes,1,opt,name=mount_path,json=mountPath" json:"mount_path,omitempty"`
	PodInfo   *PodInfo `protobuf:"bytes,2,opt,name=pod_info,json=podInfo" json:"pod_info,omitempty"`
}

func (m *ManagerCheckpoint) Reset()                    { *m = ManagerCheckpoint{} }
func (m *ManagerCheckpoint) String() string            { return proto.CompactTextString(m) }
func (*ManagerCheckpoint) ProtoMessage()               {}
func (*ManagerCheckpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ManagerCheckpoint) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *ManagerCheckpoint) GetPodInfo() *PodInfo {
	if m != nil {
		return m.PodInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateIdentityVolumeRequest)(nil), "pkg.apis.idmgr.CreateIdentityVolumeRequest")
	proto.RegisterType((*CreateIdentityVolumeResponse)(nil), "pkg.apis.idmgr.CreateIdentityVolumeResponse")
	proto.RegisterType((*DestroyIdentityVolumeRequest)(nil), "pkg.apis.idmgr.DestroyIdentityVolumeRequest")
	proto.RegisterType((*DestroyIdentityVolumeResponse)(nil), "pkg.apis.idmgr.DestroyIdentityVolumeResponse")
	proto.RegisterType((*PodInfo)(nil), "pkg.apis.idmgr.PodInfo")
	proto.RegisterType((*ManagerCheckpoint)(nil), "pkg.apis.idmgr.ManagerCheckpoint")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Management service

type ManagementClient interface {
	CreateIdentityVolume(ctx context.Context, in *CreateIdentityVolumeRequest, opts ...grpc.CallOption) (*CreateIdentityVolumeResponse, error)
	DestroyIdentityVolume(ctx context.Context, in *DestroyIdentityVolumeRequest, opts ...grpc.CallOption) (*DestroyIdentityVolumeResponse, error)
}

type managementClient struct {
	cc *grpc.ClientConn
}

func NewManagementClient(cc *grpc.ClientConn) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) CreateIdentityVolume(ctx context.Context, in *CreateIdentityVolumeRequest, opts ...grpc.CallOption) (*CreateIdentityVolumeResponse, error) {
	out := new(CreateIdentityVolumeResponse)
	err := grpc.Invoke(ctx, "/pkg.apis.idmgr.Management/CreateIdentityVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DestroyIdentityVolume(ctx context.Context, in *DestroyIdentityVolumeRequest, opts ...grpc.CallOption) (*DestroyIdentityVolumeResponse, error) {
	out := new(DestroyIdentityVolumeResponse)
	err := grpc.Invoke(ctx, "/pkg.apis.idmgr.Management/DestroyIdentityVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Management service

type ManagementServer interface {
	CreateIdentityVolume(context.Context, *CreateIdentityVolumeRequest) (*CreateIdentityVolumeResponse, error)
	DestroyIdentityVolume(context.Context, *DestroyIdentityVolumeRequest) (*DestroyIdentityVolumeResponse, error)
}

func RegisterManagementServer(s *grpc.Server, srv ManagementServer) {
	s.RegisterService(&_Management_serviceDesc, srv)
}

func _Management_CreateIdentityVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateIdentityVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.apis.idmgr.Management/CreateIdentityVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateIdentityVolume(ctx, req.(*CreateIdentityVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DestroyIdentityVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyIdentityVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DestroyIdentityVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.apis.idmgr.Management/DestroyIdentityVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DestroyIdentityVolume(ctx, req.(*DestroyIdentityVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Management_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.apis.idmgr.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIdentityVolume",
			Handler:    _Management_CreateIdentityVolume_Handler,
		},
		{
			MethodName: "DestroyIdentityVolume",
			Handler:    _Management_DestroyIdentityVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/idmgr/idmgr.proto",
}

func init() { proto.RegisterFile("pkg/apis/idmgr/idmgr.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0xfd, 0xf2, 0xb5, 0x58, 0x33, 0x42, 0xd5, 0x41, 0x31, 0xd4, 0x56, 0x4b, 0x2e, 0x16, 0xd4,
	0x14, 0xea, 0xd9, 0x83, 0xd4, 0x4b, 0x0f, 0x42, 0xc9, 0xc1, 0x6b, 0x59, 0x93, 0x69, 0xba, 0xd4,
	0xec, 0xae, 0xd9, 0x4d, 0xa1, 0x3f, 0xdd, 0x9b, 0x64, 0x13, 0x11, 0x35, 0x96, 0x22, 0x78, 0xd9,
	0x1d, 0xde, 0xcc, 0xbe, 0x37, 0xfb, 0x66, 0xa0, 0xa3, 0x96, 0xc9, 0x90, 0x29, 0xae, 0x87, 0x3c,
	0x4e, 0x93, 0xac, 0x3c, 0x03, 0x95, 0x49, 0x23, 0xb1, 0xad, 0x96, 0x49, 0x50, 0xe4, 0x02, 0x8b,
	0xfa, 0x0a, 0x4e, 0xc7, 0x19, 0x31, 0x43, 0x93, 0x98, 0x84, 0xe1, 0x66, 0xfd, 0x28, 0x9f, 0xf3,
	0x94, 0x42, 0x7a, 0xc9, 0x49, 0x1b, 0xec, 0x01, 0xa4, 0x32, 0x17, 0x66, 0xa6, 0x98, 0x59, 0x78,
	0x4e, 0xdf, 0x19, 0xb8, 0xa1, 0x6b, 0x91, 0x29, 0x33, 0x0b, 0x1c, 0xc1, 0xae, 0x92, 0xf1, 0x8c,
	0x8b, 0xb9, 0xf4, 0xfe, 0xf7, 0x9d, 0xc1, 0xde, 0xe8, 0x24, 0xf8, 0x2c, 0x10, 0x4c, 0x65, 0x3c,
	0x11, 0x73, 0x19, 0xb6, 0x54, 0x19, 0xf8, 0x67, 0xd0, 0xad, 0x57, 0xd4, 0x4a, 0x0a, 0x4d, 0xfe,
	0x2d, 0x74, 0xef, 0x49, 0x9b, 0x4c, 0xae, 0x7f, 0xd3, 0x92, 0x7f, 0x0e, 0xbd, 0x1f, 0x9e, 0x57,
	0xfc, 0x2b, 0x68, 0x55, 0x3d, 0x21, 0x42, 0x53, 0xb0, 0x94, 0x2a, 0x12, 0x1b, 0x63, 0x17, 0xdc,
	0xe2, 0xd6, 0x8a, 0x45, 0x64, 0xff, 0xe4, 0x86, 0x1f, 0x00, 0x1e, 0x40, 0x23, 0xe7, 0xb1, 0xd7,
	0xb0, 0x78, 0x11, 0xe2, 0x05, 0xec, 0x6b, 0xca, 0x56, 0x3c, 0xa2, 0x19, 0x8b, 0xa2, 0xa2, 0x0d,
	0xaf, 0x69, 0xb3, 0xed, 0x0a, 0xbe, 0x2b, 0x51, 0x7f, 0x0e, 0x87, 0x0f, 0x4c, 0xb0, 0x84, 0xb2,
	0xf1, 0x82, 0xa2, 0xa5, 0x92, 0x5c, 0xfc, 0x85, 0xbf, 0xa3, 0x57, 0x07, 0xa0, 0x14, 0x4a, 0x49,
	0x18, 0xd4, 0x70, 0x54, 0x67, 0x37, 0x5e, 0x7e, 0x25, 0xda, 0xb0, 0x06, 0x9d, 0xab, 0xed, 0x8a,
	0x2b, 0x87, 0xff, 0xe1, 0x0a, 0x8e, 0x6b, 0x87, 0x80, 0xdf, 0x88, 0x36, 0x8d, 0xba, 0x73, 0xbd,
	0x65, 0xf5, 0xbb, 0xee, 0xd3, 0x8e, 0x5d, 0xf2, 0x9b, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d,
	0x51, 0x3e, 0x00, 0x02, 0x03, 0x00, 0x00,
}
